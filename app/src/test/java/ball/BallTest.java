/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ball;

import static org.junit.Assert.*;

import org.junit.Test;

import ball.ballAgent.*;
import ball.controller.BallBoundChecker;
import ball.controller.BallRunner;
import ball.physics.Dimensions;
import ball.physics.SpherePos2D;

public class BallTest {
    
    private final BallBoundChecker boundChecker = new BallBoundChecker(300, 300); 
    private  BallRunner runner = new BallRunner(1, boundChecker);
    private BallAgent ball = this.runner.getBalls().get(0);
    /**
     * This test checks if the updatePos() method of ball is working properly when it's called
     */
    @org.junit.Test
    public void testBallBasicMovement() {
        var ball = BallFactory.randomPos();
        var initialPos = new SpherePos2D(ball.getPosition().getX(), ball.getPosition().getY(), Dimensions.FATHER, 50);
        ball.updatePos();
        assertFalse(ball.getPosition().getX() == initialPos.getX());        
    }

    @org.junit.Test
    public void testDuplicationInRunner() {
        this.refreshRunner();
        this.runner.start();
        this.runner.duplication(this.ball);
        assertTrue(this.runner.getBalls().size() == 2);
        this.runner.terminate();
    }

    @Test
    public void testGrandChildDuplication() {
        this.refreshRunner();
        this.runner.duplication(this.ball);

        //duplicating CHILD ball
        this.runner.duplication(this.runner.getBalls().get(0));
        var b = this.runner.getBalls().stream().filter(t -> t.getBallPosition().getDimension().equals(Dimensions.GRANDSON)).findAny().get();

        assertThrows(IllegalStateException.class, b::duplicate); 
    }


    private void refreshRunner() {
        if (this.runner.isAlive()) {
            this.runner.terminate();
        }
        
        this.runner = new BallRunner(1, this.boundChecker);
        this.ball = this.runner.getBalls().get(0);
    }


}
